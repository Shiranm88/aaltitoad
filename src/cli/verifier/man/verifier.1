.TH verifier 1 2022-09-23 "version v1.0.0" AALTITOAD

.SH NAME
verifier \- tick tock automata model checker

.SH SYNOPSIS
.B verifier
\fB\-f\fI path\fR
[\fB\-h\fR]
[\fB\-V\fR]
[\fB\-v\fI level\fR]
[\fB\-i\fI regex\fR]
[\fB\-p\fI name\fR]+
[\fB\-q\fI file\fR]
[\fB\-Q\fI query\fR]+
[\fB\-P\fI path\fR]+
[\fB\-L\fR]
[\fB\-w\fI name\fR]+
[\fB\-W\fR]
[\fB\-m\fR]

.SH DESCRIPTION
.B verifier
does something

.SH OPTIONS
.TP
.BR \-f ", " \-\-input " " \fIpath
(required) add a TTA model path to parse.
.TP
.BR \-h ", " \-\-help
show help message and exit.
.TP
.BR \-V ", " \-\-version
show version number and exit.
.TP
.BR \-v ", " \-\-verbosity " " \fIlevel
set verbosity to \fIlevel\fR (6 for max verbosity). This can not mute stdout output.
.TP
.BR \-i ", " \-\-ignore " " \fIregex
add GNU style \fIregex\fR of filename(s) to ignore during parse step. e.g. ".*\\.txt" to ignore all txt files.
.TP
.BR \-p ", " \-\-parser " " \fIname
select which parser \fIname\fR to use during parsing. If you're unsure what parsers are available, you can use \fB\-L\fR to list what parsers can be found.
.TP
.BR \-q ", " \-\-query\-file " " \fIfile
add \fIfile\fR containing queries to include in the model checking.
.TP
.BR \-Q ", " \-\-query " " \fIquery
add \fIquery\fR computation tree logic (ctl) to include in the model checking.
.TP
.BR \-P ", " \-\-plugin\-dir " " \fIpath
add \fIpath\fR to look for plugin files in.
.TP
.BR \-L ", " \-\-list\-plugins
list all valid plugins that can be found in the provided path(s).
.TP
.BR \-w ", " \-\-disable\-warn " " \fIname
disable warnings of type \fIname\fR. You can list disable-able warnings with \fB\-W\fR.
.TP
.BR \-W ", " \-\-list\-warn
list all warnings available. All warnings are enabled by default \- you can disable them individually with \fB\-w\fR or all of them with \fB\-m\fR.
.TP
.BR \-m ", " \-\-no\-warn
disable all warnings.

.SH PLUGINS
A plugin is a dynamically linked library (\fB*.so\fR, \fB*.dll\fR, or \fB*.dylib\fR files) that provide the symbols:
.B const char* get_plugin_name() \fR,
.B const char* get_plugin_version() \fRand
.B plugin_type get_plugin_type() \fR// plugin_type is enum: \fB0\fR (tocker plugin) or \fB1\fR (parser plugin).
If the plugin is a \fIparser\fR plugin, it must provide the symbol:
.B ntta_t* load(const std::vector<std::string>&, const std::vector<std::string>&)
if the plugin is a \fItocker\fR plugin, it must provide the symbol:
.B tocker_t* create_tocker(const std::string&, const aaltitoad::ntta_t&).

The \fBntta_t\fR and \fBtocker_t\fR types are be available in the \fIplugin_system.h\fR header file.

.SH AUTHOR
Asger Gitz\-Johansen <asger.gitz@hotmail.com>.

.SH SEE ALSO
simulator(1)
