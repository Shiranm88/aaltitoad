.de AR
.B \\$1
.I \\$2
..
.de OP
[
.B \\$1
.I \\$2
\\$3
]
..
.de op
.TP
.BR \\$1 ", " \\$2 " " \fI\\$3
..
.TH aaltitoad-verifier 1 2024-06-04 "version v1.2.2" AALTITOAD

.SH
NAME
aaltitoad-verifier - tick tock automata model checker

.SH
SYNOPSIS
.B aaltitoad-verifier
.AR -f path
.OP -h
.OP -V
.OP -v level
.OP -i regex
.OP -p name +
.OP -q file
.OP -Q query +
.OP -P path +
.OP -L
.OP -w name +
.OP -W
.OP -m

.SH
DESCRIPTION
This program can load networks of tick tock automata (see tta(7))
and computation tree logic (CTL) based queries, and check if the
provided queries are satisfied and/or reachable.

.SH OPTIONS
.op -f --input path
(required) add a TTA model path to parse.

.op -h --help
show help message and exit.

.op -V --version
show version number and exit.

.op -v --verbosity level
set verbosity to
.I
level
(6 for max verbosity). This can not mute stdout output.

.op -i --ignore regex
add GNU style 
.I
regex
of filename(s) to ignore during parse step. e.g. ".*\\.txt" to ignore all txt files.

.op -p --parser name
select which parser 
.I
name
to use during parsing. If you're unsure what parsers are available, you can use 
.B
-L
to list what parsers can be found.

.op -q --query-file file
add 
.I
file
containing queries to include in the model checking.

.op -Q --query query
add 
.I
query
computation tree logic (ctl) to include in the model checking.

.op -P --plugin-dir path
add 
.I
path
to look for plugin files in.

.op L --list-plugins
list all valid plugins that can be found in the provided path(s).

.op -w --disable-warn name
disable warnings of type 
.I
name
. You can list disable-able warnings with 
.B
-W

.op -W --list-warn
list all warnings available. All warnings are enabled by default - you can disable them individually with
.B
-w
or all of them with
.B
-m

.op -m --no-warn
disable all warnings.

.SH
PLUGINS
A plugin is a dynamically linked library (\fB*.so\fR, \fB*.dll\fR, or \fB*.dylib\fR files) that provide the symbols:
.B const char* get_plugin_name() \fR,
.B const char* get_plugin_version() \fRand
.B plugin_type get_plugin_type() \fR// plugin_type is enum: \fB0\fR (tocker plugin) or \fB1\fR (parser plugin).
If the plugin is a \fIparser\fR plugin, it must provide the symbol:
.B ntta_t* load(const std::vector<std::string>&, const std::vector<std::string>&)
if the plugin is a \fItocker\fR plugin, it must provide the symbol:
.B tocker_t* create_tocker(const std::string&, const aaltitoad::ntta_t&).

The \fBntta_t\fR and \fBtocker_t\fR types are be available in the \fIplugin_system.h\fR header file.

.SH AUTHOR
Asger Gitz\-Johansen <asger.gitz@hotmail.com>.

.SH COPYRIGHT
            Copyright (C) 2024  Asger Gitz-Johansen

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

.SH SEE ALSO
simulator(1), tta(7)
